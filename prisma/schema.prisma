// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  clerkId     String   @unique
  username    String?  @unique
  name        String?
  email       String   @unique
  avatar      String?
  currentWeight Float?
  goalWeight  Float?
  startingWeight Float?
  height      Float?
  age         Int?
  gender      String?
  activityLevel String?
  goalType    String?
  weeklyGoal  Float?
  dailyCalorieGoal Int?
  macroGoals  Json?
  waterGoal   Float?
  waterGoalUnit String? @default("oz")
  isPremium   Boolean  @default(false)
  units       String   @default("imperial")
  timezone    String   @default("America/New_York")
  archerAquaConnectionCode String?
  archerAquaUserId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  foods       Food[]
  meals       Meal[]
  recipes     Recipe[]
  goals       Goal[]
  achievements Achievement[]
  mealEntries MealEntry[]
  weightEntries WeightEntry[]
  dailyGoals  DailyGoal[]
  hydrationLogs HydrationLog[]
  notificationSettings NotificationSettings?
  privacySettings PrivacySettings?
}

model Food {
  id          String   @id @default(cuid())
  name        String
  calories    Float
  protein     Float
  carbs       Float
  fat         Float
  fiber       Float?
  sugar       Float?
  sodium      Float?
  servingSize String
  servingUnit String
  isPublic    Boolean  @default(true)
  createdBy   String
  userId      String
  category    String?
  usdaFdcId   Int?     // Reference to USDA food if copied from there
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mealEntries MealEntry[]
}

model Meal {
  id          String   @id @default(cuid())
  name        String
  foods       Json     // Array of { foodId: string, servings: number }
  totalCalories Float
  totalProtein Float
  totalCarbs  Float
  totalFat    Float
  isPublic    Boolean  @default(true)
  createdBy   String
  userId      String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recipe {
  id          String   @id @default(cuid())
  name        String
  description String
  image       String
  category    String
  cuisine     String?
  prepTime    Int      // in minutes
  cookTime    Int      // in minutes
  servings    Int
  difficulty  String   // 'Easy' | 'Medium' | 'Hard'
  calories    Int
  nutrition   Json     // { protein: number, carbs: number, fat: number, fiber?: number, sugar?: number }
  ingredients Json     // Array of RecipeIngredient
  instructions Json    // Array of strings
  tags        Json     // Array of strings
  youtube     String?  // YouTube video URL
  source      String?  // Original recipe source URL
  isPublic    Boolean  @default(true)
  createdBy   String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MealEntry {
  id          String   @id @default(cuid())
  date        String
  mealType    String
  foodId      String?
  mealId      String?
  servings    Float
  calories    Float
  protein     Float
  carbs       Float
  fat         Float
  userId      String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  food        Food?    @relation(fields: [foodId], references: [id])
}

model Workout {
  id          String   @id @default(cuid())
  name        String
  type        String
  duration    Int      // minutes
  caloriesBurned Float
  date        String
  userId      String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Goal {
  id          String   @id @default(cuid())
  type        String
  name        String
  target      Float
  current     Float
  unit        String
  userId      String
  deadline    String?
  isActive    Boolean  @default(true)
  isArchived  Boolean  @default(false)
  startDate   DateTime @default(now())
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  achievementId String  // Reference to preset achievement
  name        String
  description String
  icon        String?  // Icon name or emoji
  category    String   // e.g., "fitness", "nutrition", "consistency"
  unlockedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model WeightEntry {
  id        String   @id @default(cuid())
  userId    String
  weight    Float
  date      DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DailyGoal {
  id        String   @id @default(cuid())
  userId    String
  date      String   // YYYY-MM-DD format
  goalMl    Float    // Goal in milliliters
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model HydrationLog {
  id                  String   @id @default(cuid())
  userId              String
  drinkId             String?
  label               String
  volumeMl            Float
  hydrationMultiplier Float    @default(1.0)
  effectiveMl         Float
  consumedAt          DateTime
  consumedAtLocal     DateTime
  timezone            String
  dailyKey            String   // YYYY-MM-DD format
  source              String   @default("manual")
  notes               String?
  metadata            Json?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotificationSettings {
  id                String @id @default(cuid())
  userId            String @unique
  mealReminders     Boolean @default(true)
  workoutReminders  Boolean @default(true)
  goalAchievements  Boolean @default(true)
  weeklyReports     Boolean @default(true)
  emailNotifications Boolean @default(false)
  pushNotifications Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PrivacySettings {
  id               String @id @default(cuid())
  userId           String @unique
  profileVisibility Boolean @default(true)
  activitySharing  Boolean @default(false)
  dataCollection   Boolean @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// USDA FoodData Central Models
model UsdaFoodCategory {
  id          Int     @id
  code        String
  description String

  foods       UsdaFood[]
}

model UsdaMeasureUnit {
  id   Int    @id
  name String @unique

  portions    UsdaFoodPortion[]
}

model UsdaNutrient {
  id          Int     @id
  name        String
  unitName    String
  nutrientNbr String  @unique
  rank        Float?

  foodNutrients UsdaFoodNutrient[]
}

model UsdaFood {
  fdcId           Int       @id
  dataType        String
  description     String
  foodCategoryId  Int?
  publicationDate DateTime?

  foodCategory    UsdaFoodCategory? @relation(fields: [foodCategoryId], references: [id])
  nutrients       UsdaFoodNutrient[]
  portions        UsdaFoodPortion[]
}

model UsdaFoodNutrient {
  id            Int      @id
  fdcId         Int
  nutrientId    Int
  amount        Float?
  dataPoints    Int?
  derivationId  Int?
  min           Float?
  max           Float?
  median        Float?
  loq           String?
  footnote      String?
  minYearAcquired Int?
  percentDailyValue Float?

  food          UsdaFood     @relation(fields: [fdcId], references: [fdcId], onDelete: Cascade)
  nutrient      UsdaNutrient @relation(fields: [nutrientId], references: [id], onDelete: Cascade)

  @@unique([fdcId, nutrientId])
}

model UsdaFoodPortion {
  id                  Int      @id
  fdcId               Int
  seqNum              Int
  amount              Float?
  measureUnitId       Int?
  portionDescription  String?
  modifier            String?
  gramWeight          Float?
  dataPoints          Int?
  footnote            String?
  minYearAcquired     Int?

  food                UsdaFood         @relation(fields: [fdcId], references: [fdcId], onDelete: Cascade)
  measureUnit         UsdaMeasureUnit? @relation(fields: [measureUnitId], references: [id])

  @@unique([fdcId, seqNum])
}
